# Form implementation generated from reading ui file 'Dailog.ui'
#
# Created by: PyQt6 UI code generator 6.4.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import QFileDialog, QLineEdit,QApplication,QWidget
import pandas as pd
from googlemaps import Client as GoogleMaps
import googlemaps
import gmaps
import geopandas
from keplergl import KeplerGl
from geopy.geocoders import Nominatim

class Ui_Dialog(object):
    latList = []
    longList = []
    def setupUi(self, Dialog):
        Dialog.setObjectName("Geocode Tool")
        Dialog.resize(400, 300)
        self.radioButton = QtWidgets.QRadioButton(parent=Dialog)
        self.radioButton.setGeometry(QtCore.QRect(175, 50, 72, 20))
        self.radioButton.setBaseSize(QtCore.QSize(16, 0))
        self.radioButton.setObjectName("radioButton")
        self.radioButton.toggled.connect(self.passToggled)
        self.radioButton_2 = QtWidgets.QRadioButton(parent=Dialog)
        self.radioButton_2.setGeometry(QtCore.QRect(260, 50, 91, 20))
        self.radioButton_2.setObjectName("radioButton_2")
        self.label = QtWidgets.QLabel(parent=Dialog)
        self.label.setGeometry(QtCore.QRect(20, 15, 151, 16))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(parent=Dialog)
        self.label_2.setGeometry(QtCore.QRect(20, 53, 124, 16))
        self.label_2.setObjectName("label_2")
        #app = QApplication.instance()
        #app.setCursorFlashTime(0)
        self.textEdit = QLineEdit(parent=Dialog)
        self.textEdit.setGeometry(QtCore.QRect(180, 15, 120, 18))
        self.textEdit.setObjectName("textEdit")
        self.textEdit.setStyleSheet("""border: 1px solid #F5F5F5; border-radius: 40px;""")
        self.apiEdit = QLineEdit(parent=Dialog)
        self.apiEdit.setGeometry(QtCore.QRect(180, 100, 200, 18))
        self.apiEdit.setObjectName("textEdit")
        self.apiEdit.setStyleSheet("""border: 1px solid #F5F5F5;""")
        self.apiEdit.hide()
        self.apiLabel = QtWidgets.QLabel(parent=Dialog)
        self.apiLabel.setGeometry(QtCore.QRect(20, 100, 130, 16))
        self.apiLabel.setObjectName("apiLabel")
        self.apiLabel.hide()
        self.complete = QtWidgets.QLabel(parent=Dialog)
        self.complete.setGeometry(QtCore.QRect(20, 100, 260, 16))
        self.complete.setObjectName("complete")
        self.complete.setStyleSheet("""color: green;""")
        self.complete.hide()
        self.textEdit.setReadOnly(True)
        self.pushButton = QtWidgets.QPushButton(parent=Dialog)
        self.pushButton.setGeometry(QtCore.QRect(310, 9, 80, 32))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.getfile)
        self.geocodeButton = QtWidgets.QPushButton(parent=Dialog)
        self.geocodeButton.setGeometry(QtCore.QRect(310, 260, 80, 32))
        self.geocodeButton.setObjectName("geocodeButton")
        self.geocodeButton.clicked.connect(self.geocode)
        self.cancel = QtWidgets.QPushButton(parent=Dialog)
        self.cancel.setGeometry(QtCore.QRect(220, 260, 80, 32))
        self.cancel.setObjectName("cancel")
        self.cancel.clicked.connect(self.cancelApp)

       
        self.retranslateUi(Dialog)
        #self.buttonBox.accepted.connect(Dialog.accept) # type: ignore
        #self.buttonBox.rejected.connect(Dialog.reject) # type: ignore
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Geocode Tool"))
        self.radioButton.setText(_translate("Dialog", "Google "))
        self.radioButton_2.setText(_translate("Dialog", "Nomanitim"))
        self.label.setText(_translate("Dialog", "Select File to Geocode:"))
        self.label_2.setText(_translate("Dialog", "Select Geocode API:"))
        self.pushButton.setText(_translate("Dialog", "Upload File"))
        self.geocodeButton.setText(_translate("Dialog", "Geocode"))
        self.apiLabel.setText(_translate("Dialog", "Enter Google API Key: "))
        self.complete.setText(_translate("Dialog", "Geocoding Completed Successfully."))
        self.cancel.setText(_translate("Dialog", "Cancel"))
    
    def passToggled(self):
        if self.radioButton.isChecked():
            self.apiEdit.show()
            self.apiLabel.show()
        else:
            self.apiEdit.hide()
            self.apiLabel.hide()
        self.complete.hide()

    #Funtion to quit application
    def cancelApp(self):
        QtCore.QCoreApplication.instance().quit()

    #Function to Upload File
    def getfile(self):
      dlg = QFileDialog.getOpenFileName(self, "Open File to Geocode", "", "CSV files (*.csv)")
      if dlg:
        self.textEdit.setText(str(dlg[0]))

    #Function to geocode addresses from uploaded file
    #File should have 'patient address1', 'patient city', 'patient state', 'patient zip' columns
    #User needs to have a Google API key if they want to use Google API to geocode
    def geocode(self):
        if self.textEdit.text():
            df = pd.read_csv(self.textEdit.text(), dtype=str)
            df['full_address'] = df['patient address1'] + ', ' + df['patient city'] + ', ' + df['patient state'] + ', ' + df['patient zip'] 
            #Geocdoing with Google API
            if self.radioButton.isChecked():
                googleKey = self.apiEdit.text()
                if googleKey:
                    gmaps = googlemaps.Client(key= googleKey)
                    addresses1= df.iloc[:,-1:]
                    addresses1['longitude'] = ""
                    addresses1['latitude'] = ""
                    for x in range(len(addresses1)):
                        geocode_result = gmaps.geocode(addresses1['full_address'][x])
                        try:
                            addresses1['latitude'][x] = geocode_result[0]['geometry']['location']['lat']
                            addresses1['longitude'][x] = geocode_result[0]['geometry']['location']['lng']
                        except:
                            continue
                    df['Latitude']=addresses1['latitude']
                    df['Longitude']= addresses1['longitude']
                    latList = df['Latitude'].tolist()
                    longList = df['Longtitude'].tolist()
                    df = df.drop('full_address', axis=1)
                    df.to_csv(self.textEdit.text(), index = False) 
                    self.apiEdit.hide()
                    self.apiLabel.hide()
                    self.complete.show()
                    
                else:
                    self.apiEdit.setStyleSheet("""border: 1px solid red;""")

            #Geocoding with Nomanitum
            if self.radioButton_2.isChecked():
                locator = Nominatim(user_agent= "myGeocoder")
                from geopy.extra.rate_limiter import RateLimiter
                # 1 - conveneint function to delay between geocoding calls
                geocode = RateLimiter(locator.geocode, min_delay_seconds=1)
                df['location'] = df['full_address'].apply(geocode)
                df['point'] = df['location'].apply(lambda loc: tuple(loc.point) if loc else (("","","")))
                df[['latitude', 'longitude', 'altitude']] = pd.DataFrame(df['point'].tolist(), index=df.index)
                latList = df['latitude'].tolist()
                longList = df['longtitude'].tolist()
                df = df.drop(['full_address', 'location', 'point', 'altitude'], axis=1)
                df.to_csv(self.textEdit.text(), index = False)
                self.complete.show()
           

            
                                